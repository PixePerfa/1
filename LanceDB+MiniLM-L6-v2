import lancedb
from sentence_transformers import SentenceTransformer

pip install lancedb
pip install sentence-transformers
**************************************************
from sentence_transformers import SentenceTransformer

# Connect to LanceDB
db = lancedb.connect()
collection = db.create_collection("code_embeddings")

# Generate embeddings
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
code_snippets = ["your code snippet here"]
embeddings = model.encode(code_snippets)

# Insert data
documents = [{"id": idx, "embedding": embedding.tolist()} for idx, embedding in enumerate(embeddings)]
collection.insert(documents)

****************************************************
import lancedb

# Connect to LanceDB
db = lancedb.connect()

# Create a collection for storing embeddings
collection = db.create_collection("code_embeddings")

# Prepare data for insertion
documents = [{"id": idx, "embedding": embedding.tolist()} for idx, embedding in enumerate(embeddings)]

# Insert data into the collection
collection.insert(documents)
***********************************************************
# Generate embedding for the query
query_embedding = model.encode(["search query here"])[0]

# Search in the collection
results = collection.search(query_embedding, top_k=5)
for result in results:
    print(result["id"], result["score"])
**********************************************************************
import redis
import numpy as np

r = redis.Redis(host='localhost', port=6379, db=0)

# Store embeddings in Redis
for idx, embedding in enumerate(embeddings):
    r.hset(f"embedding:{idx}", mapping={str(i): val for i, val in enumerate(embedding)})

# Retrieve embedding from Redis for fast lookup
def get_embedding_from_redis(idx):
    return np.array([float(r.hget(f"embedding:{idx}", str(i))) for i in range(embedding.shape[1])])
